{"version":3,"sources":["device/device.js","App.js","serviceWorker.js","index.js"],"names":["iotf","require","Device","org","token","device_config","this","device","IotfManagedDevice","_setup","id","publishHTTPS","JSON","stringify","stateModule","getState","that","connect","on","parent","device_connected","console","log","argument","process","exit","commandName","format","payload","topic","parse","changeState","state","pub","newstate","module","exports","App","props","handleChange","event","setState","target","name","value","checkFields","text","currenttime","Date","toLocaleString","slice","senttime","setInterval","Push","test","getMessage","IsConnected","intervalID","tick","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6addf8cc.chunk.js","sourcesContent":["\nvar iotf = require('ibmiotf');\n\n//onst axios = require('axios');\nclass Device {\n  constructor(org, token) {\n    const device_config = {\n      \"org\": org,\n      \"domain\": \"internetofthings.ibmcloud.com\",\n      \"type\": \"IBM-KTH\",\n      \"id\": \"0\",\n      \"auth-method\": \"token\",\n      \"auth-token\": token,\n      \"use-client-certs\": false\n    };\n    this.device = new iotf.IotfManagedDevice(device_config);\n    this._setup();\n  }\n  \n  Push(id) {\n    this.device.publishHTTPS(id, 'json', JSON.stringify('Any new messages?'), 0);\n  }\n\n getMessage(){\n   return stateModule.getState();\n }\n\n\n  _setup(){\n    var that = this;\n\n    /* Connect it to Watson IoT! */\n    this.device.connect();\n\n    /* When your device has connected, setup listeners and callbacks. */\n    this.device.on('connect', function(parent){\n      that.device_connected = true;  \n\n      /* If the device disconnects, we do not need to panic. */\n      that.device.on('disconnect', function(){\n        that.device_connected = false;\n        console.log('Disconnected');\n      });\n      \n      /* Errors are pretty bad, right? */\n      that.device.on('error', function (argument) {\n        console.log(argument);\n        process.exit(1);\n      });\n    });\n\n      /* When a command is recieved execute code */\n      that.device.on(\"command\", function (commandName,format,payload,topic) {\n        if(commandName === \"currentMessage\") {\n            console.log(commandName + ':'); \n            console.log(JSON.parse(payload))\n            stateModule.changeState(JSON.parse(payload));\n        } else {\n            console.log(\"Command not supported.. \" + commandName);\n        }\n    });\n  }\n  \n  IsConnected() {\n    return this.device_connected;\n  }\n  \n}\n\n\nvar stateModule = (function () {\n  var state; // Private Variable\n\n  var pub = {};// public object - returned at end of module\n\n  pub.changeState = function (newstate) {\n      state = newstate;\n  };\n\n  pub.getState = function() {\n      return state;\n  }\n\n  return pub; // expose externally\n}());\n\nmodule.exports = Device;\n\n\n","\nimport React, { Component } from 'react';\nimport './App.css';\n\nvar IoTDevice = require ('./device/device.js');\n\n/* Edit these lines to reflect your IoT platform config. */\nconst ORG_ID = \"cl3hm5\";\nconst ACCESS_TOKEN = \"secure_token_ibm\";\nvar device = new IoTDevice(ORG_ID, ACCESS_TOKEN);\n\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      text: \"\",\n      currenttime:new Date().toLocaleString().slice(12.0),\n      senttime:\"\"\n\n    }\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    },this.checkFields);\n  };\n\n\ncomponentWillMount(){\nsetInterval(() => {\n  /* This pushes / publishes data to Watson IoT*/\n  device.Push('getCurrentMessage');\n  var test = device.getMessage()\n  if(test!==this.state.text){\n    var event = {\n      target: {\n        name: \"senttime\",\n        value: new Date().toLocaleString().slice(12.0)\n      }\n    };\n    this.handleChange(event)\n  }\n  console.log(test)\n  console.log(device.IsConnected())\n  var event = {\n    target: {\n      name: \"text\",\n      value: test\n    }\n  };\n  this.handleChange(event)\n}, 10000);}\n\n  \ncomponentDidMount(){\n  this.intervalID = setInterval(\n    () => this.tick(),\n    1000\n  );\n}\n\n  tick() {\n    var event = {\n      target: {\n        name: \"currenttime\",\n        value: new Date().toLocaleString().slice(12.0)\n      }\n    };\n    this.handleChange(event)\n\n  }\n    \nrender(){\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n     \n        <div className=\"screen\">\n        <div className = \"text \">\n          <p>Message:</p> \n        <div id=\"text\">{this.state.text}</div>\n        </div>\n        <div className = \"currenttime \">\n        <p>Current Time</p> \n          <div id=\"\">{this.state.currenttime}\n          </div>\n          </div>\n        <div className = \"senttime \">\n        <p>Sent Time</p> \n          <div id=\"\">{this.state.senttime}\n          </div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}